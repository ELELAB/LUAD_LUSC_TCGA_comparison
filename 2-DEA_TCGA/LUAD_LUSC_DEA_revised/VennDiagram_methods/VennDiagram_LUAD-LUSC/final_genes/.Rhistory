#number of up-regulated genes cancer vs normal
length(N_C_L[[1]]$up)
#number of down-regulated genes cancer vs normal
length(N_C_L[[2]]$down)
N_C_L <- DE_limma(N_C_cotr, dataframe_LUAD, design.matrix, 2, 0.01)
#number of up-regulated genes cancer vs normal
length(N_C_L[[1]]$up)
#number of down-regulated genes cancer vs normal
length(N_C_L[[2]]$down)
SE_LUAD<-get(load("GDCdata/TCGA-LUSC/legacy/Gene_expression/Gene_expression_quantification/LUSC_Illumina_HiSeq.rda"))
length(which(colData(SE_LUAD)$shortLetterCode =="TP"))
length(which(colData(SE_LUAD)$shortLetterCode =="NT"))
SE_LUAD<-get(load("GDCdata/TCGA-LUAD/legacy/Gene_expression/Gene_expression_quantification/LUAD_Illumina_HiSeq.rda"))
SE_LUAD<-get(load("GDCdata/TCGA-LUAD/legacy/Gene_expression/Gene_expression_quantification/LUAD_Illumina_HiSeq.rda"))
dataframe_LUAD<-get(load("GDCdata/TCGA-LUAD/legacy/Gene_expression/Gene_expression_quantification/LUAD_Illumina_HiSeq_PreprocessedData.rda"))
my_IDs <- get_IDs(dataframe_LUAD)
length(which(my_IDs$condition=="cancer"))
#check the normal samples number
length(which(my_IDs$condition=="normal"))
condition <- as.factor(my_IDs$condition)
design.matrix <- model.matrix(~0+condition)
colnames(design.matrix) <- c("cancer","normal")
N_C_cotr <- makeContrasts("cancer-normal", levels= design.matrix)
N_C_L <- DE_limma(N_C_cotr, dataframe_LUAD, design.matrix, 1, 0.01)
length(N_C_L[[1]]$up)
length(N_C_L[[2]]$down)
nrow(dataframe_LUAD)
N_C_L[[1]]$up
N_C_L[[2]]$down
write.table(N_C_L[[1]]$up, "down_limma_nonpaired.txt", sep = "\t")
write.table(N_C_L[[1]]$up, "up_limma_nonpaired.txt", sep = "\t")
write.table(N_C_L[[2]]$down, "down_limma_nonpaired.txt", sep = "\t")
length(which(colData(SE_LUAD)$shortLetterCode =="TP"))
length(which(colData(SE_LUAD)$shortLetterCode =="NT"))
length(which(my_IDs$condition=="cancer"))
#check the normal samples number
length(which(my_IDs$condition=="normal"))
head(N_C_L[[1]]$up)
head(data.frame(N_C_L[[1]]$up))
write.table(head(data.frame(N_C_L[[1]]$up)), "up_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(head(data.frame(N_C_L[[1]]$down)), "down_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(N_C_L[[2]]$down, "down_limma_nonpaired.txt", sep = "\t")
N_C_L <- DE_limma(N_C_cotr, dataframe_LUAD, design.matrix, 1, 0.01)
length(N_C_L[[1]]$up)
length(N_C_L[[2]]$down)
write.table(head(data.frame(N_C_L[[2]]$down)), "down_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(data.frame(N_C_L[[2]]$down), "down_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(data.frame(N_C_L[[1]]$up), "down_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(data.frame(N_C_L[[1]]$up), "up_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(data.frame(N_C_L[[2]]$down), "down_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(data.frame(N_C_L[[2]]$down), "down_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(data.frame(N_C_L[[1]]$up), "up_genes.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(N_C_L[[1]]$up, "up_limma_nonpaired.txt", sep = "\t",col.names = FALSE,row.names = FALSE)
write.table(N_C_L[[1]]$up, "up_limma_nonpaired.txt", sep = "\t",col.names = FALSE,row.names = FALSE, quote = FALSE)
write.table(N_C_L[[2]]$down, "down_limma_nonpaired.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
source("https://bioconductor.org/biocLite.R")
biocLite("TCGAbiolinksGUI")
SE_LUAD<-get(load("./LUAD_Illumina_HiSeq_paired.rda"))
library(SummarizedExperiment)
setwd("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data")
load("./Luad_data_prepared_recount2_notnormalized/tcga_gtex.RData")
dim(eset.gtex)
load("./Luad_data_prepared_recount2_notnormalized/tcga_cancer.RData")
dim(eset.tcga.cancer)
LUAD <- get(load("./Luad_data_prepared_recount2_notnormalized/unifiedData_normalized.RData"))
View(LUAD)
dim(LUAD)
374+355
luad.recount<-TCGAquery_recount2(project = "TCGA", tissue = "lung")
library(TCGAbiolinks)
library(TCGAutils)
library(GenomicDataCommons)
library(SummarizedExperiment)
library(TCGAbiolinks)
library(TCGAutils)
library(GenomicDataCommons)
library(SummarizedExperiment)
install_github("waldronlab/TCGAutils")
library(devtools)
devtools::install_github('BioinformaticsFMRP/TCGAbiolinks')
library(TCGAbiolinks)
library(GenomicDataCommons)
luad.recount<-TCGAquery_recount2(project = "TCGA", tissue = "lung")
dim(luad.recount$TCGA_lung)
luad.recount.gtex<-TCGAquery_recount2(project="GTEX", tissue="lung")
dim(luad.recount.gtex$GTEX_lung)
query.luad<- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts")
samplesDown.luad <- getResults(query.luad,cols=c("cases"))
dataSmTP.luad <- TCGAquery_SampleTypes(barcode = samplesDown.luad,
typesample = "TP")
dataSmNT.luad <- TCGAquery_SampleTypes(barcode = samplesDown.luad,
typesample = "NT")
query.luad2 <- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts",
barcode = c(dataSmTP.luad, dataSmNT.luad))
setwd("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/Luad_data_prepared_recount2_notnormalized")
GDCdownload(query=query.luad2)
dataPrep1.luad <- GDCprepare(query = query.luad2,save = TRUE )
load("TCGA-LUADTranscriptome_ProfilingWed_Jan_10_16:55:23_2018.RData")
dataPrep1.luad <- get(load("TCGA-LUADTranscriptome_ProfilingWed_Jan_10_16:55:23_2018.RData"))
c(dataSmTP.luad, dataSmNT.luad)
tcga.barcodes<-c(dataSmTP.luad, dataSmNT.luad)
purityinfo.R.luad<-TCGAtumor_purity(dataSmTP.luad, 0, 0, 0, 0, 0.6)
dataSmTP.luad.pure.R<-purityinfo.R.luad$pure
length(dataSmTP.luad.pure.R)
tcga.pure_barcodes<-c(dataSmTP.luad.pure.R, dataSmNT.luad)
uuid.tcga<-TCGAtranslateID(TCGAbarcode(tcga.pure_barcodes), type="file_id")
library(TCGAutils)
install_github("waldronlab/TCGAutils")
install_github("waldronlab/TCGAutils")
load("./Luad_data_prepared_recount2_notnormalized/tcga_gtex.RData")
setwd("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data")
load("./Luad_data_prepared_recount2_notnormalized/tcga_gtex.RData")
dim(eset.gtex)
load("./Luad_data_prepared_recount2_notnormalized/tcga_cancer.RData")
dim(eset.tcga.cancer)
eset.all<-cbind(eset.tcga.cancer, eset.gtex)
rownames(eset.all)<-gsub("\\..*", "",rownames(eset.all))
eset.all.N<-TCGAanalyze_Normalization(tabDF = eset.all,
geneInfo = geneInfoHT,
method = "gcContent")
dim(eset.all.N)
rse <- get(load("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/Luad_data_prepared_recount2_notnormalized/TCGA-LUADTranscriptome_ProfilingWed_Jan_10_16:55:23_2018.RData"))
dim(rse)
rownames(eset.all.N) <- rowData(rse)[match(rownames(eset.all.N), rowData(eset.all.N)[,"ensembl_gene_id"]),"external_gene_name"]
class(rse)
class(eset.all.N)
?match
rownames(eset.all.N)
match(rownames(eset.all.N), rowData(eset.all.N)[,"ensembl_gene_id"]),"external_gene_name"
match(rownames(eset.all.N), rowData(eset.all.N)[,"ensembl_gene_id"]
)
rownames(eset.all.N) <- rowData(rse)[match(rownames(eset.all.N), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
View(eset.all.N)
duplicated(rownames(eset.all.N))
View(rowData(rse))
which(duplicated(rownames(eset.all.N))=="TRUE")
rownames(eset.all.N[c(6498,6678)])
rownames(eset.all.N[6678])
rownames(eset.all.N)[c(6498,6678)]
rownames(eset.all.N)[6498]
head(rownames(eset.all.N))
rownames(eset.all.N)[1]
rownames(eset.all.N)[56]
rownames(eset.all.N)[6456]
rownames(eset.all.N)[6497]
rownames(eset.all.N)[6498]
class(rownames(eset.all.N)[6498])
is.na(rowData(rse))
which(is.na(rowData(rse)))
which(is.na(rowData(rse)$external_gene_name))
which(is.na(rowData(rse)$ensembl_gene_id))
which(duplicated(rownames(eset.all.N))=="TRUE")
index <- which(duplicated(rownames(eset.all.N))=="TRUE")
rownames(eset.all.N)[index]
is.na(rownames(eset.all.N))
which(is.na(rownames(eset.all.N))=="TRUE")
rownames(eset.all.N)[3877]
eset.all.NF<- TCGAanalyze_Filtering(tabDF = eset.all.N,
method = "quantile",
qnt.cut =  0.25)
eset.all.N<-TCGAanalyze_Normalization(tabDF = eset.all,
geneInfo = geneInfoHT,
method = "gcContent")
save(eset.all.N,file = "./Luad_data_prepared_recount2_notnormalized/unifiedData_normalized.RData")
eset.all.NF<- TCGAanalyze_Filtering(tabDF = eset.all.N,
method = "quantile",
qnt.cut =  0.25)
save(eset.all.NF,file = "./Luad_data_prepared_recount2_notnormalized/unifiedData_normalized_filtered.RData")
dim(eset.all.NF)
dim(eset.all.N)
rownames(eset.all.NF) <- rowData(rse)[match(rownames(eset.all.NF), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
index <- which(duplicated(rownames(eset.all.N))=="TRUE")
index
length(index)
?"duplicated"
View(eset.all.NF)
save(eset.all.NF,file = "./Luad_data_prepared_recount2_notnormalized/unifiedData_normalized_filtered.RData")
source("/data/user/marta/pipeline/DE/limma/TCGAbiolinks_functions.R")
load("./Luad_data_prepared_recount2_notnormalized/tcga_meta.RData")
View(tcga.metadata)
tcga.metadata <- subset(tcga.metadata,tcga.metadata$uid %in% colnames(eset.all.NF))
load("./Luad_data_prepared_recount2_notnormalized/gtex_meta.RData")
View(gtex.metadata)
View(eset.all.NF)
my_IDs <- data.frame(colnames(eset.all.NF))
View(my_IDs)
my_IDs$barcode <- data.frame(colnames(eset.all.NF))
View(my_IDs)
?gsub
my_IDs <- data.frame(colnames(eset.all.NF))
index_tumor <- which(my_IDs$colnames.eset.all.NF. %in% tcga.metadata$uid)
index_normal <- which(my_IDs$colnames.eset.all.NF. %in% gtex.metadata$sampid)
condition <- c()
condition[index_tumor] <- "cancer"
condition[index_normal] <- "normal"
my_IDs$condition <- condition
colnames(my_IDs)[1] <- "barcodes"
View(my_IDs)
tss <- c()
tss[index_tumor] <- tcga.metadata$tss
tss[index_normal] <- gtex.metadata$tss
my_IDs$tss <- tss
View(my_IDs)
tcga.metadata.bis <- subset(tcga.metadata,tcga.metadata$uid %in% colnames(eset.all.NF),select=c("uid","tss"))
my_IDs <- merge(my_IDs,tcga.metadata.bis,by="tss")
View(my_IDs)
my_IDs <- data.frame(colnames(eset.all.NF))
index_tumor <- which(my_IDs$colnames.eset.all.NF. %in% tcga.metadata.bis$uid)
index_normal <- which(my_IDs$colnames.eset.all.NF. %in% gtex.metadata$sampid)
condition <- c()
condition[index_tumor] <- "cancer"
condition[index_normal] <- "normal"
my_IDs$condition <- condition
colnames(my_IDs)[1] <- "barcodes"
my_IDs <- merge(my_IDs,tcga.metadata.bis,by="uid")
colnames(my_IDs)[1] <- "uid"
my_IDs <- merge(my_IDs,tcga.metadata.bis,by="uid")
View(my_IDs)
?merge
my_IDs <- merge(my_IDs,tcga.metadata.bis,by="uid",all.x=TRUE)
View(my_IDs)
my_IDs <- data.frame(colnames(eset.all.NF))
index_tumor <- which(my_IDs$colnames.eset.all.NF. %in% tcga.metadata.bis$uid)
index_normal <- which(my_IDs$colnames.eset.all.NF. %in% gtex.metadata$sampid)
condition <- c()
condition[index_tumor] <- "cancer"
condition[index_normal] <- "normal"
my_IDs$condition <- condition
colnames(my_IDs)[1] <- "uid"
my_IDs <- merge(my_IDs,tcga.metadata.bis,by="uid",all.x=TRUE)
View(my_IDs)
# created by Marta 10/01/2018
library(SummarizedExperiment)
library(TCGAbiolinks)
source("/data/user/marta/pipeline/DE/limma/TCGAbiolinks_functions.R")
source("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/functions_unifiedData.R")
View(geneInfo)
length(grep(mir,rownames(geneInfo),ignore.case = TRUE))
length(grep("mir",rownames(geneInfo),ignore.case = TRUE))
setwd("/data/user/shared_projects/gsnor_brca/rnaseq/rnaseq_legacy/all")
legacy <- get(load("brca_PreprocessedData_legacy_TSS.rda"))
length(rownames(legacy)[grep("mir",rownames(legacy),ignore.case = TRUE)])
rownames(legacy)[grep("mir",rownames(legacy),ignore.case = TRUE)]
length(rownames(legacy)[grep("-",rownames(legacy))])
legacy_bis <- get(load("brca_PreprocessedData_legacy.rda"))
TCGAanalyze_Normalization
detach("package:TCGAbiolinks", unload=TRUE)
library("TCGAbiolinks", lib.loc="/usr/local/lib/R/site-library")
TCGAanalyze_Normalization
detach("package:TCGAbiolinks", unload=TRUE)
library("TCGAbiolinks", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rownames(legacy_bis)[grep("mir",rownames(legacy_bis),ignore.case = TRUE)]
rownames(legacy)[grep("mir",rownames(legacy),ignore.case = TRUE)]
rownames(legacy_bis)[grep("-",rownames(legacy_bis),ignore.case = TRUE)]
rownames(legacy_bis)[grep("rRNA",rownames(legacy_bis),ignore.case = TRUE)]
setwd("/data/user/shared_projects/gsnor_brca/rnaseq/rnaseq_harmonized/all")
harm <- get(load("brca_PreprocessedData_harmonized.rda"))
rownames(harm)[grep("rRNA",rownames(harm),ignore.case = TRUE)]
rownames(harm)[grep("mir",rownames(harm),ignore.case = TRUE)]
head(rownames(harm))
dim(harm)
tcga_only <- get(load("/data/user/marta/pipeline/DE/new_LUAD-LUSC/LUAD_tss_tumorPurity/all/LUAD_PreprocessedData_all_TumorPurity.rda"))
genesToKeep <- rownames(tcga_only)
length(genesToKeep)
setwd("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/Recount_luad")
eset.all.N <- get(load("unifiedData_normalized.RData"))
nrow(genesToKeep)
nrow(eset.all.N)
eset.all.NF<- TCGAanalyze_Filtering(tabDF = eset.all.N,
method = "quantile",
qnt.cut =  0.25)
rse <- get(load("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/Luad_data_prepared_recount2_notnormalized/TCGA-LUADTranscriptome_ProfilingWed_Jan_10_16:55:23_2018.RData"))
rse <- get(load("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/Recount_luad/TCGA-LUADTranscriptome_ProfilingWed_Jan_10_16:55:23_2018.RData"))
rownames(eset.all.NF) <- rowData(rse)[match(rownames(eset.all.NF), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
index <- which(duplicated(rownames(eset.all.N))=="TRUE")
length(index)
dim(eset.all.NF)
eset.all.NF <- get(load("unifiedData_normalized_filtered.RData"))
dim(eset.all.NF)
head(rownames(eset.all.NF))
length(genesToKeep)
eset.all.NF <- subset(eset.all.NF,rownames(eset.all.NF) %in% genesToKeep)
View(eset.all.NF)
dim(eset.all.NF)
load("tcga_gtex.RData")
dim(eset.gtex)
load("tcga_cancer.RData")
dim(eset.tcga.cancer)
eset.all<-cbind(eset.tcga.cancer, eset.gtex)
rownames(eset.all)<-gsub("\\..*", "",rownames(eset.all))
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
na <- which(is.na(rownames(eset.all))==TRUE)
rownames(eset.all)[na]
eset.all <- subset(eset.all, !rownames(eset.all) %in% rownames(eset.all)[na])
nrow(eset.all)
na <- which(is.na(rownames(eset.all))==TRUE)
eset.all<-cbind(eset.tcga.cancer, eset.gtex)
dim(eset.all)
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
na <- which(is.na(rownames(eset.all))==TRUE)
eset.all <- subset(eset.all, !rownames(eset.all) %in% rownames(eset.all)[na])
nrow(eset.all)
eset.all<-cbind(eset.tcga.cancer, eset.gtex)
dim(eset.all)
rownames(eset.all)<-gsub("\\..*", "",rownames(eset.all))
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
na <- which(is.na(rownames(eset.all))==TRUE)
eset.all <- subset(eset.all, !rownames(eset.all) %in% rownames(eset.all)[na])
nrow(eset.all)
View(rowData(rse))
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
head(rownames(eset.all))
eset.all<-cbind(eset.tcga.cancer, eset.gtex)
dim(eset.all)
#remove ".number" in rownames(eset.all) otherwise the normalization sted does
# not work
rownames(eset.all)<-gsub("\\..*", "",rownames(eset.all))
#convert into gene symbol
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
#length(rownames(eset.all)[grep("mir",rownames(eset.all),ignore.case = TRUE)])
#length(rownames(eset.all)[grep("-",rownames(eset.all))])
#length(rownames(eset.all)[grep("rRNA",rownames(eset.all))])
#length(which(is.na(rownames(eset.all)))==TRUE)
#remove NA genes
na <- which(is.na(rownames(eset.all))==TRUE)
eset.all <- subset(eset.all, !rownames(eset.all) %in% rownames(eset.all)[na])
nrow(eset.all)
head(rownames(eset.all))
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"external_gene_name"]),"ensembl_gene_id"]
head(rownames(eset.all))
na <- which(is.na(rownames(eset.all))==TRUE)
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
nrow(eset.all)
length(rownames(eset.all)[grep("mir",rownames(eset.all),ignore.case = TRUE)])
length(rownames(eset.all)[grep("rRNA",rownames(eset.all))])
length(which(is.na(rownames(eset.all)))==TRUE)
rownames(eset.all) <- rowData(rse)[match(rownames(eset.all), rowData(rse)[,"external_gene_name"]),"ensembl_gene_id"]
#normalization and filtering
eset.all.N<-TCGAanalyze_Normalization(tabDF = eset.all,
geneInfo = geneInfoHT,
method = "gcContent")
dim(eset.all.N)
save(eset.all.N,file = "./unifiedData_normalized.RData")
rownames(eset.all.N) <- rowData(rse)[match(rownames(eset.all.N), rowData(rse)[,"ensembl_gene_id"]),"external_gene_name"]
length(rownames(eset.all.N)[grep("mir",rownames(eset.all.N),ignore.case = TRUE)])
length(rownames(eset.all.N)[grep("-",rownames(eset.all.N))])
length(rownames(eset.all.N)[grep("rRNA",rownames(eset.all.N))])
length(which(is.na(rownames(eset.all.N)))==TRUE)
eset.all.NF<- TCGAanalyze_Filtering(tabDF = eset.all.N,
method = "quantile",
qnt.cut =  0.25)
dim(eset.all.NF)
na <- which(is.na(rownames(eset.all.NF))==TRUE)
save(eset.all.NF,file = "unifiedData_normalized_filtered.RData")
dim(eset.all.NF)
load("tcga_meta.RData")
tcga.metadata.cancer <- subset(tcga.metadata,tcga.metadata$uid %in% colnames(eset.all.NF),select=c("uid","tss"))
tcga.metadata.cancer$condition <- as.factor("cancer")
load("gtex_meta.RData")
gtex.metadata$condition <- as.factor("normal")
colnames(gtex.metadata)[2] <- "uid"
gtex.metadata <- gtex.metadata[,-1]
joint_IDs <- rbind(tcga.metadata.cancer,gtex.metadata)
rownames(joint_IDs) <- seq(1:nrow(joint_IDs))
condition <- joint_IDs$condition[match(colnames(eset.all.NF),as.character(joint_IDs$uid))]
tss <- as.factor(as.character(joint_IDs$tss[match(colnames(eset.all.NF),as.character(joint_IDs$uid))]))
# limma
limma_name <- "./limma/limma_unified_LUAD_tss.csv"
up_name <- "./limma/up_limma_unified_LUAD_tss.txt"
down_name <- "./limma/down_limma_unified_LUAD_tss.txt"
limma_unified(eset.all.NF,condition,tss,limma_name,up_name,down_name)
load("tcga_gtex.RData")
dim(eset.gtex)
setwd("/data/user/marta/pipeline/DE/new_LUAD-LUSC/unified_data/Recount_lusc")
load("gtex.RData")
dim(eset.gtex)
load("gtex_meta_lusc.RData")
dim(gtex.metadata)
setwd("/data/user/shared_projects/luad_lusc_2018/marta/LUAD_LUSC_DEA_revised/VennDiagram_methods/VennDiagram_LUAD-LUSC/final_genes")
dir1 <- "/data/user/marta/pipeline/DE/new_LUAD-LUSC/VennDiagram_three_methods/VennDiagram_LUAD-LUSC/final_genes_list/tumor_Purity/"
up_paired_LUAD <- read.table("new_up_paired_LUAD.txt")
up_paired_LUAD1 <- read.table(paste0(dir1,"new_up_paired_LUAD.txt"))
length(up_paired_LUAD$V1)
length(up_paired_LUAD1$V1)
intersect <- intersect(up_paired_LUAD$V1,up_paired_LUAD1$V1)
genes_paired_LUAD_less <- up_paired_LUAD1$V1[which(!up_paired_LUAD1$V1 %in% intersect)]
length(genes_paired_LUAD_less)
length(intersect(up_paired_LUAD1$V1,genes_paired_LUAD))
up_paired_LUAD <- read.table("new_up_paired_LUAD.txt")
up_paired_LUAD1 <- read.table(paste0(dir1,"new_up_paired_LUAD.txt"))
length(up_paired_LUAD$V1)
length(up_paired_LUAD1$V1)
intersect <- intersect(up_paired_LUAD$V1,up_paired_LUAD1$V1)
genes_paired_LUAD <- up_paired_LUAD$V1[which(!up_paired_LUAD$V1 %in% intersect)]
length(intersect(up_paired_LUAD1$V1,genes_paired_LUAD))
length(intersect(up_paired_LUAD1$V1,genes_paired_LUAD_less))
length(intersect(up_paired_LUAD$V1,genes_paired_LUAD_less))
length(intersect)
length(up_paired_LUAD$V1)
length(up_paired_LUAD1$V1)
write.table(genes_paired_LUAD,"less_genes_paired_up_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
genes_paired_LUAD_less
down_paired_LUAD <- read.table("new_down_paired_LUAD.txt")
down_paired_LUAD1 <- read.table(paste0(dir1,"new_down_paired_LUAD.txt"))
length(down_paired_LUAD$V1)
length(down_paired_LUAD1$V1)
intersect <- intersect(down_paired_LUAD$V1,down_paired_LUAD1$V1)
genes_paired_LUAD <- down_paired_LUAD$V1[which(!down_paired_LUAD$V1 %in% intersect)]
length(intersect(down_paired_LUAD1$V1,genes_paired_LUAD))
length(intersect)
genes_paired_LUAD_less <- down_paired_LUAD1$V1[which(!down_paired_LUAD1$V1 %in% intersect)]
length(genes_paired_LUAD_less)
length(intersect(down_paired_LUAD$V1,genes_paired_LUAD_less))
write.table(genes_paired_LUAD,"less_genes_paired_down_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
genes_paired_LUAD_less
up_paired_LUAD <- read.table("new_up_paired_LUAD.txt")
up_paired_LUAD1 <- read.table(paste0(dir1,"new_up_paired_LUAD.txt"))
length(up_paired_LUAD$V1)
length(up_paired_LUAD1$V1)
intersect <- intersect(up_paired_LUAD$V1,up_paired_LUAD1$V1)
length(intersect)
genes_paired_LUAD <- up_paired_LUAD$V1[which(!up_paired_LUAD$V1 %in% intersect)]
length(intersect(up_paired_LUAD1$V1,genes_paired_LUAD))
write.table(genes_paired_LUAD,"more_genes_paired_up_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
genes_paired_LUAD_less <- up_paired_LUAD1$V1[which(!up_paired_LUAD1$V1 %in% intersect)]
length(genes_paired_LUAD_less)
length(intersect(up_paired_LUAD$V1,genes_paired_LUAD_less))
write.table(genes_paired_LUAD_less,"less_genes_paired_up_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
down_paired_LUAD <- read.table("new_down_paired_LUAD.txt")
down_paired_LUAD1 <- read.table(paste0(dir1,"new_down_paired_LUAD.txt"))
length(down_paired_LUAD$V1)
length(down_paired_LUAD1$V1)
intersect <- intersect(down_paired_LUAD$V1,down_paired_LUAD1$V1)
length(intersect)
genes_paired_LUAD <- down_paired_LUAD$V1[which(!down_paired_LUAD$V1 %in% intersect)]
length(intersect(down_paired_LUAD1$V1,genes_paired_LUAD))
write.table(genes_paired_LUAD,"more_genes_paired_down_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
genes_paired_LUAD_less <- down_paired_LUAD1$V1[which(!down_paired_LUAD1$V1 %in% intersect)]
length(genes_paired_LUAD_less)
length(intersect(down_paired_LUAD$V1,genes_paired_LUAD_less))
write.table(genes_paired_LUAD_less,"less_genes_paired_down_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
up_all_LUAD <- read.table("new_up_all_LUAD.txt")
up_all_LUAD1 <- read.table(paste0(dir1,"new_up_all_LUAD.txt"))
length(up_all_LUAD$V1)
length(up_all_LUAD1$V1)
intersect <- intersect(up_all_LUAD$V1,up_all_LUAD1$V1)
length(intersect)
genes_LUAD <- up_all_LUAD$V1[which(!up_all_LUAD$V1 %in% intersect)]
length(genes_LUAD)
length(intersect(up_all_LUAD1$V1,genes_LUAD))
genes_all_LUAD_less <- up_all_LUAD1$V1[which(!up_all_LUAD1$V1 %in% intersect)]
length(genes_all_LUAD_less)
length(intersect(up_all_LUAD$V1,genes_all_LUAD_less))
write.table(genes_all_LUAD_less,"less_genes_all_up_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
down_all_LUAD <- read.table("new_down_all_LUAD.txt")
down_all_LUAD1 <- read.table(paste0(dir1,"new_down_all_LUAD.txt"))
length(down_all_LUAD$V1)
length(down_all_LUAD1$V1)
intersect <- intersect(down_all_LUAD$V1,down_all_LUAD1$V1)
length(intersect)
genes_all_LUAD_less <- down_all_LUAD1$V1[which(!down_all_LUAD1$V1 %in% intersect)]
length(genes_all_LUAD_less)
length(intersect(down_all_LUAD$V1,genes_all_LUAD_less))
write.table(genes_all_LUAD_less,"less_genes_all_down_LUAD.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
up_paired_LUSC <- read.table("new_up_paired_LUSC.txt")
up_paired_LUSC1 <- read.table(paste0(dir1,"new_up_paired_LUSC.txt"))
length(up_paired_LUSC$V1)
length(up_paired_LUSC1$V1)
intersect <- intersect(up_paired_LUSC$V1,up_paired_LUSC1$V1)
length(intersect)
genes_paired_LUSC_less <- up_paired_LUSC1$V1[which(!up_paired_LUSC1$V1 %in% intersect)]
length(genes_paired_LUSC_less)
length(intersect(up_paired_LUSC$V1,genes_paired_LUSC_less))
write.table(genes_paired_LUSC_less,"less_genes_paired_up_LUSC.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
down_paired_LUSC <- read.table("new_down_paired_LUSC.txt")
down_paired_LUSC1 <- read.table(paste0(dir1,"new_down_paired_LUSC.txt"))
length(down_paired_LUSC$V1)
length(down_paired_LUSC1$V1)
intersect <- intersect(down_paired_LUSC$V1,down_paired_LUSC1$V1)
length(intersect)
genes_paired_LUSC_less <- down_paired_LUSC1$V1[which(!down_paired_LUSC1$V1 %in% intersect)]
length(genes_paired_LUSC_less)
length(intersect(down_paired_LUSC$V1,genes_paired_LUSC_less))
write.table(genes_paired_LUSC_less,"less_genes_paired_down_LUSC.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
up_all_LUSC <- read.table("new_up_all_LUSC.txt")
up_all_LUSC1 <- read.table(paste0(dir1,"new_up_all_LUSC.txt"))
length(up_all_LUSC$V1)
length(up_all_LUSC1$V1)
intersect <- intersect(up_all_LUSC$V1,up_all_LUSC1$V1)
length(intersect)
genes_LUSC <- up_all_LUSC$V1[which(!up_all_LUSC$V1 %in% intersect)]
length(genes_LUSC)
genes_all_LUSC_less <- up_all_LUSC1$V1[which(!up_all_LUSC1$V1 %in% intersect)]
length(genes_all_LUSC_less)
length(intersect(up_all_LUSC$V1,genes_all_LUSC_less))
write.table(genes_all_LUSC_less,"less_genes_all_up_LUSC.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
down_all_LUSC <- read.table("new_down_all_LUSC.txt")
down_all_LUSC1 <- read.table(paste0(dir1,"new_down_all_LUSC.txt"))
length(down_all_LUSC$V1)
length(down_all_LUSC1$V1)
intersect <- intersect(down_all_LUSC$V1,down_all_LUSC1$V1)
length(intersect)
genes_all_LUSC_less <- down_all_LUSC1$V1[which(!down_all_LUSC1$V1 %in% intersect)]
length(genes_all_LUSC_less)
length(intersect(down_all_LUSC$V1,genes_all_LUSC_less))
write.table(genes_all_LUSC_less,"less_genes_all_down_LUSC.txt",quote = FALSE, row.names = FALSE, col.names = FALSE)
