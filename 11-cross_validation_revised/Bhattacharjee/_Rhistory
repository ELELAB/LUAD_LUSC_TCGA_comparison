setwd("~/Scrivania/marta/cross-validation/Bhattacharjee/DEA")
?require
require(gProfileR)
library(gProfileR)
x <- require(gProfileR)
x
x <- require(gProfileR)
x
x <- library(gProfileR)
x
if(require(gProfileR)==FALSE)
install.packages("gProfileR")
if(require(gProfileR)==FALSE)
{install.packages("gProfileR")}
if(require(gProfileR)==FALSE)
{install.packages("gProfileR")}
else
if(require(gProfileR)==FALSE)
{install.packages("gProfileR")} else{
print("it is already installed")}
?source
if(require(AnnotationDbi)==FALSE)
{source("http://bioconductor.org/biocLite.R")
biocLite("AnnotationDbi")}
source("install_packages_script.R")
setwd("~/cross-validation/Bhattacharjee/DEA")
setwd("~/Scrivania/marta/cross-validation/Bhattacharjee/DEA")
source("../../../install_packages_script.R")
source("../../install_packages_script.R")
data <- read.csv("../DatasetA_12600gene.csv")
View(data)
data <- data[,-2]
rownames(data) <- data$probe.set
data <- data[,-1]
rowID <- rownames(data)
dim(data)
?doesNotexist
?doesNotExist
?file.exists
file.exists("../conversion_file.csv")
if(file.exists("../conversion_file.csv")){
conversion <- read.csv("../conversion_file.csv",row.names = 1)} else{
conversion <- gconvert(rowID, organism = "hsapiens", target="AFFY_HG_U133_PLUS_2")}
View(conversion)
gene_symbol <- conversion$name[match(rowID,tolower(conversion$alias))]
length(gene_symbol)
conversion_data <- na.omit(cbind(rowID,as.character(gene_symbol)))
new_data <- subset(data,rownames(data) %in% conversion_data[,"rowID"])
dim(new_data)
rowGroup <- conversion_data[,2]
rowID <- rownames(new_data)
collapse.object=collapseRows(datET=new_data, rowGroup=rowGroup, rowID=rowID)
dat1Collapsed=data.frame(collapse.object$group2row, collapse.object$datETcollapsed)
nrow(dat1Collapsed)
length(unique(dat1Collapsed$group))
length(unique(dat1Collapsed$selectedRowID))
View(dat1Collapsed)
dat1Collapsed <- dat1Collapsed[,- c(1,2)]
dat1Collapsed1 <- dat1Collapsed[,union(grep("NL",colnames(dat1Collapsed)),union(grep("AD",colnames(dat1Collapsed)),grep("SQ",colnames(dat1Collapsed))))]
View(dat1Collapsed1)
colnames(dat1Collapsed1)
write.csv(dat1Collapsed,"collapsed_data_AD_SQ_NL.csv")
View(dat1Collapsed)
dat1Collapsed <- dat1Collapsed[,union(grep("NL",colnames(dat1Collapsed)),union(grep("AD",colnames(dat1Collapsed)),grep("SQ",colnames(dat1Collapsed))))]
write.csv(dat1Collapsed,"collapsed_data_AD_SQ_NL.csv")
length(grep("NL",colnames(dat1Collapsed)))
length(grep("AD",colnames(dat1Collapsed)))
length(grep("SQ",colnames(dat1Collapsed)))
index_nl <- grep("NL",colnames(dat1Collapsed))
index_ad <- grep("AD",colnames(dat1Collapsed))
index_sq <- grep("SQ",colnames(dat1Collapsed))
condition <- vector()
index_nl <- grep("NL",colnames(dat1Collapsed))
index_ad <- grep("AD",colnames(dat1Collapsed))
index_sq <- grep("SQ",colnames(dat1Collapsed))
condition[index_nl] <- "NL"
condition <- factor()
index_nl <- grep("NL",colnames(dat1Collapsed))
index_ad <- grep("AD",colnames(dat1Collapsed))
index_sq <- grep("SQ",colnames(dat1Collapsed))
condition[index_nl] <- "NL"
condition <- vector()
condition[index_sq] <- "SQ"
condition <- vector()
index_nl <- grep("NL",colnames(dat1Collapsed))
index_ad <- grep("AD",colnames(dat1Collapsed))
index_sq <- grep("SQ",colnames(dat1Collapsed))
condition[index_nl] <- "NL"
condition[index_ad] <- "AD"
condition[index_sq] <- "SQ"
condition <- as.factor(condition)
condition
design.matrix <- model.matrix(~condition)
View(design.matrix)
design.matrix <- model.matrix(~0+condition)
design.matrix <- model.matrix(~0+condition)
condition <- vector()
index_nl <- grep("NL",colnames(dat1Collapsed))
index_ad <- grep("AD",colnames(dat1Collapsed))
index_sq <- grep("SQ",colnames(dat1Collapsed))
condition[index_nl] <- "NL"
condition[index_ad] <- "AD"
condition[index_sq] <- "SQ"
condition <- as.factor(condition)
design.matrix <- model.matrix(~0+condition)
View(design.matrix)
colnames(design.matrix) <- c("AD","NL","SQ")
View(design.matrix)
contrast <- makeContrasts("AD-NL","SQ-NL", levels= design.matrix)
source("../../install_packages_script.R")
contrast <- makeContrasts("AD-NL","SQ-NL", levels= design.matrix)
View(contrast)
fit <- lmFit(dat1Collapsed, design.matrix)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
AD-NL <- topTable(fit2, coef=1, adjust="BH")
ADvsNL <- topTable(fit2, coef=1, adjust="BH")
View(ADvsNL)
ADvsNL <- topTable(fit2, coef=1, adjust="fdr")
View(ADvsNL)
ADvsNL <- topTable(fit2, coef=1, adjust="fdr", number = nrow(dat1Collapsed))
SQvsNL <- topTable(fit2, coef=2, adjust="fdr", number = nrow(dat1Collapsed))
View(SQvsNL)
make_DEA_table <- function(tt,FDR,LFC){
index.up <- which(tt$logFC >= LFC & tt$adj.P.Val < FDR)
index.down <- which(tt$logFC <= -LFC & tt$adj.P.Val < FDR)
direction <- c()
direction[index.up] <- "up"
direction[index.down] <- "down"
direction[!(1:nrow(tt) %in% union(index.up,index.down))] <- "no DE"
tt <- cbind(tt,direction)
return(tt)
}
ADvsNL <- make_DEA_table(ADvsNL,0.01,1)
View(ADvsNL)
View(dat1Collapsed)
View(ADvsNL)
up <- data.frame(rownames(ADvsNL[ADvsNL$direction == "up", ]))
View(up)
write.csv(ADvsNL, "limma_DEA_ADvsNL.csv", quote = FALSE)
c <- read.csv("limma_DEA_ADvsNL.csv")
View(c)
down <- data.frame(rownames(ADvsNL[ADvsNL$direction == "down", ]))
write.table(up, "up_ADvsNL.txt", sep = "\t",col.names = FALSE,row.names = FALSE, quote = FALSE)
write.table(down, "down_ADvsNL.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
SQvsNL <- make_DEA_table(SQvsNL,0.01,1)
write.csv(SQvsNL, "limma_DEA_SQvsNL.csv", quote = FALSE)
up <- data.frame(rownames(SQvsNL[SQvsNL$direction == "up", ]))
down <- data.frame(rownames(SQvsNL[SQvsNL$direction == "down", ]))
write.table(up, "up_SQvsNL.txt", sep = "\t",col.names = FALSE,row.names = FALSE, quote = FALSE)
write.table(down, "down_SQvsNL.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
print(paste0("the analysis detected ",length(which(ADvsNL$direction == "up"))," up-regulated genes"))
print(paste0("the analysis detected ",length(which(ADvsNL$direction== "down")), " down-regulated genes"))
print(paste0("the analysis of squamous vs normal lung detected ",length(which(SQvsNL$direction == "up"))," up-regulated genes"))
print(paste0("the analysis of squamous vs normal lung detected ",length(which(SQvsNL$direction== "down")), " down-regulated genes"))
up_luad <- read.table("up_ADvsNL.txt")
up_lusc <- read.table("up_SQvsNL.txt")
View(up_luad)
overlap <- intersect(up_luad$V1,up_lusc$V1)
?setdiff
up_luad_only <- setdiff(up_luad$V1,overlap)
print(paste0("the analysis of adenocarcinoma vs normal lung detected ",length(which(ADvsNL$direction == "up"))," up-regulated genes"))
2357-438
write.table(up_luad_only,"up_LUAD_only.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
up_lusc_only <- setdiff(up_lusc$V1,overlap)
intersect(up_luad_only,up_lusc_only)
write.table(up_lusc_only,"up_LUSC_only.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
down_luad <- read.table("down_ADvsNL.txt")
down_lusc <- read.table("down_SQvsNL.txt")
overlap <- intersect(down_luad$V1,down_lusc$V1)
down_luad_only <- setdiff(down_luad$V1,overlap)
dim(down_luad)
length(overlap)
701-613
write.table(down_luad_only,"down_LUAD_only.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
down_lusc_only <- setdiff(down_lusc$V1,overlap)
write.table(down_lusc_only,"down_LUSC_only.txt", sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
dim(down_lusc)
994-613
"MUC5B" %in% rownames(dat1Collapsed)
View(ADvsNL)
ADvsNL["MUC5B",]
SQvsNL["MUC5B",]
ADvsNL["HABP2",]
SQvsNL["HABP2",]
ADvsNL["MUC21",]
SQvsNL["MUC21",]
ADvsNL["KCNKS",]
SQvsNL["KCNKS",]
ADvsNL["ICA1",]
SQvsNL["ICA1",]
ADvsNL["CSTA",]
SQvsNL["CSTA",]
ADvsNL["P2RY1",]
SQvsNL["P2RY1",]
ADvsNL["ANXA8",]
SQvsNL["ANXA8",]
ADvsNL["FZD7",]
SQvsNL["FZD7",]
ADvsNL["ITGA6",]
SQvsNL["ITGA6",]
ADvsNL["CHST7",]
SQvsNL["CHST7",]
ADvsNL["RND3",]
SQvsNL["RND3",]
ADvsNL["ACOX2",]
SQvsNL["ACOX2",]
ADvsNL["ALDOC",]
SQvsNL["ALDOC",]
ADvsNL["AQP5",]
SQvsNL["AQP5",]
ADvsNL["ARSE",]
SQvsNL["ARSE",]
ADvsNL["FABP5",]
SQvsNL["FABP5",]
ADvsNL["SIPA1L2",]
SQvsNL["SIPA1L2",]
ADvsNL["SLC1A3",]
SQvsNL["SLC1A3",]
ADvsNL["SLC2A9",]
ADvsNL["NRCAM",]
SQvsNL["NRCAM",]
ADvsNL["AGR2",]
SQvsNL["AGR2",]
ADvsNL["SPDEF",]
